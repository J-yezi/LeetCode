# coding=utf-8

"""
给定一个非负整数 num，反复将各个位上的数字相加，直到结果为一位数。

示例:

输入: 38
输出: 2
解释: 各位相加的过程为：3 + 8 = 11, 1 + 1 = 2。 由于 2 是一位数，所以返回 2。
进阶:
你可以不使用循环或者递归，且在 O(1) 时间复杂度内解决这个问题吗？
"""


"""
数根
原数: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27
数根: 1 2 3 4 5 6 7 8 9  1  2  3  4  5  6  7  8  9  1  2  3  4  5  6  7  8  9

总结规律：
1、n 是 0 ，数根就是 0
2、n 不是 9 的倍数，数根就是 n 对 9 取余，即 n mod 9
3、n 是 9 的倍数，数根就是 9
"""


class Solution(object):
    def addDigits(self, num):
        return ((num - 1) % 9 if num - 1 > 0 else (num - 1) // 9) + 1


if __name__ == "__main__":
    s = Solution()
    print(s.addDigits(9))
